// Generated by gmmproc 2.78.1 -- DO NOT MODIFY!
#ifndef _GTKMM_COLUMNVIEWCELL_H
#define _GTKMM_COLUMNVIEWCELL_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2023 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkmm/listitem.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkColumnViewCell = struct _GtkColumnViewCell;
using GtkColumnViewCellClass = struct _GtkColumnViewCellClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class GTKMM_API ColumnViewCell_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{
/** %Gtk::ColumnViewCell is used by Gtk::ColumnViewColumn to represent items
 * in a cell in Gtk::ColumnView.
 *
 * The %Gtk::ColumnViewCells are managed by the columnview widget (with its factory)
 * and cannot be created by applications, but they need to be populated
 * by application code. This is done by calling set_child().
 *
 * %Gtk::ColumnViewCells exist in 2 stages:
 *
 * 1. The unbound stage where the listitem is not currently connected to
 *    an item in the list. In that case, property_item() is not set.
 *
 * 2. The bound stage where the listitem references an item from the list.
 *    property_item() is set.
 *
 * @ingroup ListView
 * @newin{4,12}
 */

class GTKMM_API ColumnViewCell : public ListItem
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = ColumnViewCell;
  using CppClassType = ColumnViewCell_Class;
  using BaseObjectType = GtkColumnViewCell;
  using BaseClassType = GtkColumnViewCellClass;

  // noncopyable
  ColumnViewCell(const ColumnViewCell&) = delete;
  ColumnViewCell& operator=(const ColumnViewCell&) = delete;

private:  friend class ColumnViewCell_Class;
  static CppClassType columnviewcell_class_;

protected:
  explicit ColumnViewCell(const Glib::ConstructParams& construct_params);
  explicit ColumnViewCell(GtkColumnViewCell* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  ColumnViewCell(ColumnViewCell&& src) noexcept;
  ColumnViewCell& operator=(ColumnViewCell&& src) noexcept;

  ~ColumnViewCell() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkColumnViewCell*       gobj()       { return reinterpret_cast<GtkColumnViewCell*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkColumnViewCell* gobj() const { return reinterpret_cast<GtkColumnViewCell*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkColumnViewCell* gobj_copy();

private:

   
public:
  // Don't use Glib::RefPtr<Glib::Object> Glib::wrap(GObject* object, bool take_copy).
  // The object may be an interface object, e.g. Gio::AppInfo. Such an object can't be
  // cast to Glib::Object. https://gitlab.gnome.org/GNOME/glibmm/-/issues/93
 

  /** Gets the model item that associated with @a self.
   * 
   * If @a self is unbound, this function returns <tt>nullptr</tt>.
   * 
   * @newin{4,12}
   * 
   * @return The item displayed.
   */
  Glib::RefPtr<Glib::ObjectBase> get_item();
  
  /** Gets the model item that associated with @a self.
   * 
   * If @a self is unbound, this function returns <tt>nullptr</tt>.
   * 
   * @newin{4,12}
   * 
   * @return The item displayed.
   */
  Glib::RefPtr<const Glib::ObjectBase> get_item() const;
  
  /** Gets the position in the model that @a self currently displays.
   * 
   * If @a self is unbound, GTK_INVALID_LIST_POSITION is returned.
   * 
   * @newin{4,12}
   * 
   * @return The position of this item.
   */
  guint get_position() const;
  
  /** Checks if the item is displayed as selected.
   * 
   * The selected state is maintained by the liste widget and its model
   * and cannot be set otherwise.
   * 
   * @newin{4,12}
   * 
   * @return <tt>true</tt> if the item is selected.
   */
  bool get_selected() const;
  
  /** Checks if a list item has been set to be focusable via
   * set_focusable().
   * 
   * @newin{4,12}
   * 
   * @return <tt>true</tt> if the item is focusable.
   */
  bool get_focusable() const;
  
  /** Sets @a self to be focusable.
   * 
   * If an item is focusable, it can be focused using the keyboard.
   * This works similar to Gtk::Widget::set_focusable().
   * 
   * Note that if items are not focusable, the keyboard cannot be used to activate
   * them and selecting only works if one of the listitem's children is focusable.
   * 
   * By default, list items are focusable.
   * 
   * @newin{4,12}
   * 
   * @param focusable If the item should be focusable.
   */
  void set_focusable(bool focusable =  true);
  
  /** Sets the child to be used for this listitem.
   * 
   * This function is typically called by applications when
   * setting up a listitem so that the widget can be reused when
   * binding it multiple times.
   * 
   * @newin{4,12}
   * 
   * @param child The list item's child or <tt>nullptr</tt> to unset.
   */
  void set_child(Widget& child);
  void unset_child();
  
  /** Gets the child previously set via set_child() or
   * <tt>nullptr</tt> if none was set.
   * 
   * @newin{4,12}
   * 
   * @return The child.
   */
  Widget* get_child();
  
  /** Gets the child previously set via set_child() or
   * <tt>nullptr</tt> if none was set.
   * 
   * @newin{4,12}
   * 
   * @return The child.
   */
  const Widget* get_child() const;

  /** Widget used for display.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Widget* > property_child() ;

/** Widget used for display.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Widget* > property_child() const;

  /** If the item can be focused with the keyboard.
   * 
   * @newin{4,12}
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_focusable() ;

/** If the item can be focused with the keyboard.
   * 
   * @newin{4,12}
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_focusable() const;

  /** Displayed item.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Glib::ObjectBase> > property_item() const;


  /** Position of the item.
   * 
   * @newin{4,12}
   *
   * Default value: 4294967295
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_position() const;


  /** If the item is currently selected.
   * 
   * @newin{4,12}
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_selected() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::ColumnViewCell
   */
  GTKMM_API
  Glib::RefPtr<Gtk::ColumnViewCell> wrap(GtkColumnViewCell* object, bool take_copy = false);
}


#endif /* _GTKMM_COLUMNVIEWCELL_H */

