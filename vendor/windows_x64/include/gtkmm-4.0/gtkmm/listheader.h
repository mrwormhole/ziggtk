// Generated by gmmproc 2.78.1 -- DO NOT MODIFY!
#ifndef _GTKMM_LISTHEADER_H
#define _GTKMM_LISTHEADER_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2023 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkmm/widget.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkListHeader = struct _GtkListHeader;
using GtkListHeaderClass = struct _GtkListHeaderClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class GTKMM_API ListHeader_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{

/** %Gtk::ListHeader is used by list widgets to represent the headers they display.
 *
 * The %Gtk::ListHeaders are managed just like Gtk::ListItems via
 * their factory, but provide a different set of properties suitable for
 * managing the header instead of individual items.
 *
 * @see Gtk::ListView, Gio::ListModel
 * @newin{4,12}
 */

class GTKMM_API ListHeader : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = ListHeader;
  using CppClassType = ListHeader_Class;
  using BaseObjectType = GtkListHeader;
  using BaseClassType = GtkListHeaderClass;

  // noncopyable
  ListHeader(const ListHeader&) = delete;
  ListHeader& operator=(const ListHeader&) = delete;

private:  friend class ListHeader_Class;
  static CppClassType listheader_class_;

protected:
  explicit ListHeader(const Glib::ConstructParams& construct_params);
  explicit ListHeader(GtkListHeader* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  ListHeader(ListHeader&& src) noexcept;
  ListHeader& operator=(ListHeader&& src) noexcept;

  ~ListHeader() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkListHeader*       gobj()       { return reinterpret_cast<GtkListHeader*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkListHeader* gobj() const { return reinterpret_cast<GtkListHeader*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkListHeader* gobj_copy();

private:

   
public:
  // Don't use Glib::RefPtr<Glib::Object> Glib::wrap(GObject* object, bool take_copy).
  // The object may be an interface object, e.g. Gio::AppInfo. Such an object can't be
  // cast to Glib::Object. https://gitlab.gnome.org/GNOME/glibmm/-/issues/93
 

  /** Gets the model item at the start of the section.
   * This is the item that occupies the list model at position
   * property_start().
   * 
   * If @a self is unbound, this function returns <tt>nullptr</tt>.
   * 
   * @newin{4,12}
   * 
   * @return The item displayed.
   */
  Glib::RefPtr<Glib::ObjectBase> get_item();
  
  /** Gets the model item at the start of the section.
   * This is the item that occupies the list model at position
   * property_start().
   * 
   * If @a self is unbound, this function returns <tt>nullptr</tt>.
   * 
   * @newin{4,12}
   * 
   * @return The item displayed.
   */
  Glib::RefPtr<const Glib::ObjectBase> get_item() const;
  
  /** Gets the start position in the model of the section that @a self is
   * currently the header for.
   * 
   * If @a self is unbound, GTK_INVALID_LIST_POSITION is returned.
   * 
   * @newin{4,12}
   * 
   * @return The start position of the section.
   */
  guint get_start() const;
  
  /** Gets the end position in the model of the section that @a self is
   * currently the header for.
   * 
   * If @a self is unbound, GTK_INVALID_LIST_POSITION is returned.
   * 
   * @newin{4,12}
   * 
   * @return The end position of the section.
   */
  guint get_end() const;
  
  /** Gets the the number of items in the section.
   * 
   * If @a self is unbound, 0 is returned.
   * 
   * @newin{4,12}
   * 
   * @return The number of items in the section.
   */
  guint get_n_items() const;
  
  /** Sets the child to be used for this listitem.
   * 
   * This function is typically called by applications when
   * setting up a header so that the widget can be reused when
   * binding it multiple times.
   * 
   * @newin{4,12}
   * 
   * @param child The list item's child or <tt>nullptr</tt> to unset.
   */
  void set_child(Widget& child);
  void unset_child();
  
  /** Gets the child previously set via set_child() or
   * <tt>nullptr</tt> if none was set.
   * 
   * @newin{4,12}
   * 
   * @return The child.
   */
  Widget* get_child();
  
  /** Gets the child previously set via set_child() or
   * <tt>nullptr</tt> if none was set.
   * 
   * @newin{4,12}
   * 
   * @return The child.
   */
  const Widget* get_child() const;

  /** Widget used for display.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Widget* > property_child() ;

/** Widget used for display.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Widget* > property_child() const;

  /** The first position no longer part of this section.
   * 
   * @newin{4,12}
   *
   * Default value: 4294967295
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_end() const;


  /** The item at the start of the section.
   * 
   * @newin{4,12}
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Glib::ObjectBase> > property_item() const;


  /** Number of items in this section.
   * 
   * @newin{4,12}
   *
   * Default value: 0
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_n_items() const;


  /** First position of items in this section.
   * 
   * @newin{4,12}
   *
   * Default value: 4294967295
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_start() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::ListHeader
   */
  GTKMM_API
  Glib::RefPtr<Gtk::ListHeader> wrap(GtkListHeader* object, bool take_copy = false);
}


#endif /* _GTKMM_LISTHEADER_H */

