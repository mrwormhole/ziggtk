// Generated by gmmproc 2.78.1 -- DO NOT MODIFY!
#ifndef _GTKMM_STATUSBAR_H
#define _GTKMM_STATUSBAR_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/*
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/widget.h>


 // The entire file is deprecated.

#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkStatusbar = struct _GtkStatusbar;
using GtkStatusbarClass = struct _GtkStatusbarClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class GTKMM_API Statusbar_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{

/** %Text status indicator.
 *
 * A %Gtk::Statusbar widget is usually placed along the bottom of
 * an application's main window.
 *
 * A %Gtk::Statusbar may provide a regular commentary of the application's
 * status (as is usually the case in a web browser, for example), or may be
 * used to simply output a message when the status changes, (when an upload
 * is complete in an FTP client, for example).
 *
 * Status bars in GTK maintain a stack of messages. The message at
 * the top of the each bar’s stack is the one that will currently be displayed.
 *
 * Any messages added to a statusbar’s stack must specify a context id that
 * is used to uniquely identify the source of a message. This context id can
 * be generated by get_context_id(). Note that messages are stored in a
 * stack, and when choosing which message to display, the stack structure is
 * adhered to, regardless of the context identifier of a message.
 *
 * One could say that a statusbar maintains one stack of messages for
 * display purposes, but allows multiple message producers to maintain
 * sub-stacks of the messages they produced (via context ids).
 *
 * Messages are added to the bar’s stack with push().
 *
 * The message at the top of the stack can be removed using
 * pop(). A message can be removed from anywhere in the
 * stack if its message id was recorded at the time it was added. This is done
 * using remove_message().
 *
 * The %Statusbar widget looks like this:
 * @image html statusbar1.png
 *
 * @deprecated 4.10: A simple statusbar can be made with a Gtk::Label.
 * @ingroup Widgets
 */

class GTKMM_API Statusbar : public Widget
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Statusbar CppObjectType;
  typedef Statusbar_Class CppClassType;
  typedef GtkStatusbar BaseObjectType;
  typedef GtkStatusbarClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  Statusbar(Statusbar&& src) noexcept;
  Statusbar& operator=(Statusbar&& src) noexcept;

  // noncopyable
  Statusbar(const Statusbar&) = delete;
  Statusbar& operator=(const Statusbar&) = delete;

  ~Statusbar() noexcept override;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend GTKMM_API class Statusbar_Class;
  static CppClassType statusbar_class_;

protected:
  explicit Statusbar(const Glib::ConstructParams& construct_params);
  explicit Statusbar(GtkStatusbar* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  /// Provides access to the underlying C GObject.
  GtkStatusbar*       gobj()       { return reinterpret_cast<GtkStatusbar*>(gobject_); }

  /// Provides access to the underlying C GObject.
  const GtkStatusbar* gobj() const { return reinterpret_cast<GtkStatusbar*>(gobject_); }

private:

public:
  Statusbar();

  
  /** Returns a new context identifier, given a description
   * of the actual context.
   * 
   * Note that the description is not shown in the UI.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_description Textual description of what context
   * the new message is being used in.
   * @return An integer id.
   */
  guint get_context_id(const Glib::ustring& context_description);
  
  /** Pushes a new message onto a statusbar’s stack.
   *
   * @param text The message to add to the statusbar.
   * @param context_id The message’s context id, as returned by get_context_id().
   * @return A message id that can be used with remove_message().
   */
  guint push(const Glib::ustring& text, guint context_id =  0);
  
  /** Removes the first message in the `Gtk::Statusbar`’s stack
   * with the given context id.
   * 
   * Note that this may not change the displayed message,
   * if the message at the top of the stack has a different
   * context id.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_id A context identifier.
   */
  void pop(guint context_id =  0);
  
  /** Forces the removal of a message from a statusbar’s stack.
   * The exact @a context_id and @a message_id must be specified.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_id A context identifier.
   * @param message_id A message identifier, as returned by push().
   */
  void remove_message(guint message_id, guint context_id =  0);
  
  /** Forces the removal of all messages from a statusbar's
   * stack with the exact @a context_id.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_id A context identifier.
   */
  void remove_all_messages(guint context_id =  0);

  // no_default_handler because GtkStatusbarClass is private.
 

  /**
   * @par Slot Prototype:
   * <tt>void on_my_%text_pushed(guint context_id, const Glib::ustring& text)</tt>
   *
   * Flags: Run Last
   *
   * Emitted whenever a new message gets pushed onto a statusbar's stack.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_id The context id of the relevant message/statusbar.
   * @param text The message that was pushed.
   */

  Glib::SignalProxy<void(guint, const Glib::ustring&)> signal_text_pushed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%text_popped(guint context_id, const Glib::ustring& text)</tt>
   *
   * Flags: Run Last
   *
   * Emitted whenever a new message is popped off a statusbar's stack.
   * 
   * Deprecated: 4.10: This widget will be removed in GTK 5
   * 
   * @param context_id The context id of the relevant message/statusbar.
   * @param text The message that was just popped.
   */

  Glib::SignalProxy<void(guint, const Glib::ustring&)> signal_text_popped();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} //namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::Statusbar
   */
  GTKMM_API
  Gtk::Statusbar* wrap(GtkStatusbar* object, bool take_copy = false);
} //namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_STATUSBAR_H */

